* Entries included in this document:
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-23-23][10-23-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-24-23][10-24-23]]

* 10-23-23

** xpm (display image, not just ascii)
- https://emacs.stackexchange.com/questions/18410/how-to-make-a-video-game-with-emacs
  - ~'ve succeeded in doing so for a XPM Tetris. SVG allows you more freedom ultimately,~
    - Saw https://github.com/leoliu/sokoban uses xpm (where I had originally saw it, pre-writing this from scratch), and https://github.com/wasamasa/retris from the stackexachge.


From: https://emacs.stackexchange.com/questions/45626/xpm-change-displayed-image-on-mouse-over-in-header-line-format

This works:

#+begin_src emacs-lisp :tangle yes
(setq
 img1 '(image :type xpm :data "/* XPM */
          static char * close_tab_xpm[] = {
          \"14 11 3 1\",
          \"       c None\",
          \".      c #000000\",
          \"+      c #FFFFFF\",
          \"     .....    \",
          \"    .......   \",
          \"   .........  \",
          \"  ...+...+... \",
          \"  ....+.+.... \",
          \"  .....+..... \",
          \"  ....+.+.... \",
          \"  ...+...+... \",
          \"   .........  \",
          \"    .......   \",
          \"     .....    \"};"
          :ascent center :mask (heuristic t) :margin 0))
#+end_src

#+RESULTS:
| image | :type | xpm | :data | /* XPM */ |


- https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html
  - ~insert-image~ defined here.
#+begin_src emacs-lisp :tangle yes
(insert-image img1)
#+end_src

#+RESULTS:
#+begin_example
t
#+end_example
 
#+ATTR_ORG: :width 300
[[file:.images/2023-10-23_18-21-12_screenshot.png]]
But we need to make it bigger:


#+begin_src emacs-lisp :tangle yes
(insert-image img1 nil (list 1 1 10))
#+end_src



#+begin_src emacs-lisp :tangle yes
 (list 1 1 10)
#+end_src

#+RESULTS:
| 1 | 1 | 10 |


#+begin_src emacs-lisp :tangle yes
(insert-image img1 nil (list 1 1 1))
#+end_src

  Looked here:
  - https://github.com/alezost/ducpel/blob/master/ducpel-glyphs.el
  - And: https://github.com/leoliu/sokoban/blob/master/sokoban.el, they have bigger images, so let me try that.


#+ATTR_ORG: :width 200
[[file:.images/2023-10-23_18-48-17_screenshot.png]]
- Looks good, so we need larger canvas size, to make image appear larger. There is no enlarging.

** Let me think about how to structure the data
- 1: Resources 2d vector (coal, wood, copper, iron) - Only one resource element per location
- 2: Collision 2D vector (walls, water, farms, mining)
- 3: Stat Variables (resources, moves)

** 20:15 Haven't done much on this in a bit. I've been listening to Sacha Chua's emacs chat podcast (video), and this game is getting complicated, and I have this "frustrated" feeling. But we'll pick it up tomorrow. Going to push up all my shit.
- I'm trying not to look at outside code too much. Figuring out the grid, and state management is going to suck, and it's going to be difficult.
#+ATTR_ORG: :width 100
[[file:.images/2023-10-23_20-19-09_screenshot.png]]

#+begin_src emacs-lisp :tangle yes
(setq level1-map
"XXXXX
X...X
X...X
X...X
XXXXX"
)
;;;(setq level1-list (read-from-string level1-map))
;;(level1-list)


;; http://xahlee.info/emacs/emacs/elisp_string_functions.html
(setq level1-length (length level1-map))
(substring level1-map 0 2)

(let ((x 1))
  (while (<= x level1-length)
    (insert (substring level1-map (- x 1) x))
    (setq x (1+ x))
    (if (eq (mod x 6) 0)
        (insert "newline")
    )
  )
)
XXXXXnewline
X...Xnewline
X...Xnewline
X...Xnewline
XXXXXnewline


#+end_src
I've got some stuff to parse the maps, but there's still a lot to do. I got to parse these maps, into 2D lists. But I need lists for resources, collisions, etc. Yeah... And I still need to figure out the graphics part.
