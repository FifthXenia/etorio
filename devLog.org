* Entries included in this document:
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-23-23][10-23-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-24-23][10-24-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-25-23][10-25-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-26-23][10-26-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-27-23][10-27-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-28-23][10-28-23]]
- [[https://github.com/FifthXenia/etorio/blob/main/devLog.org#10-29-23][10-29-23]]
* 10-23-23

** xpm (display image, not just ascii)
- https://emacs.stackexchange.com/questions/18410/how-to-make-a-video-game-with-emacs
  - ~'ve succeeded in doing so for a XPM Tetris. SVG allows you more freedom ultimately,~
    - Saw https://github.com/leoliu/sokoban uses xpm (where I had originally saw it, pre-writing this from scratch), and https://github.com/wasamasa/retris from the stackexachge.


From: https://emacs.stackexchange.com/questions/45626/xpm-change-displayed-image-on-mouse-over-in-header-line-format

This works:

#+begin_src emacs-lisp :tangle yes
(setq
 img1 '(image :type xpm :data "/* XPM */
          static char * close_tab_xpm[] = {
          \"14 11 3 1\",
          \"       c None\",
          \".      c #000000\",
          \"+      c #FFFFFF\",
          \"     .....    \",
          \"    .......   \",
          \"   .........  \",
          \"  ...+...+... \",
          \"  ....+.+.... \",
          \"  .....+..... \",
          \"  ....+.+.... \",
          \"  ...+...+... \",
          \"   .........  \",
          \"    .......   \",
          \"     .....    \"};"
          :ascent center :mask (heuristic t) :margin 0))
#+end_src

#+RESULTS:
| image | :type | xpm | :data | /* XPM */ |


- https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html
  - ~insert-image~ defined here.
#+begin_src emacs-lisp :tangle yes
(insert-image img1)
#+end_src

#+RESULTS:
#+begin_example
t
#+end_example
 
#+ATTR_ORG: :width 300
[[file:.images/2023-10-23_18-21-12_screenshot.png]]
But we need to make it bigger:


#+begin_src emacs-lisp :tangle yes
(insert-image img1 nil (list 1 1 10))
#+end_src



#+begin_src emacs-lisp :tangle yes
 (list 1 1 10)
#+end_src

#+RESULTS:
| 1 | 1 | 10 |


#+begin_src emacs-lisp :tangle yes
(insert-image img1 nil (list 1 1 1))
#+end_src

  Looked here:
  - https://github.com/alezost/ducpel/blob/master/ducpel-glyphs.el
  - And: https://github.com/leoliu/sokoban/blob/master/sokoban.el, they have bigger images, so let me try that.


#+ATTR_ORG: :width 200
[[file:.images/2023-10-23_18-48-17_screenshot.png]]
- Looks good, so we need larger canvas size, to make image appear larger. There is no enlarging.

** Let me think about how to structure the data
- 1: Resources 2d vector (coal, wood, copper, iron) - Only one resource element per location
- 2: Collision 2D vector (walls, water, farms, mining)
- 3: Stat Variables (resources, moves)

** 20:15 Haven't done much on this in a bit. I've been listening to Sacha Chua's emacs chat podcast (video), and this game is getting complicated, and I have this "frustrated" feeling. But we'll pick it up tomorrow. Going to push up all my shit.
- I'm trying not to look at outside code too much. Figuring out the grid, and state management is going to suck, and it's going to be difficult.
#+ATTR_ORG: :width 100
[[file:.images/2023-10-23_20-19-09_screenshot.png]]

#+begin_src emacs-lisp :tangle yes
(setq level1-map
"XXXXX
X...X
X...X
X...X
XXXXX"
)
;;;(setq level1-list (read-from-string level1-map))
;;(level1-list)


;; http://xahlee.info/emacs/emacs/elisp_string_functions.html
(setq level1-length (length level1-map))
(substring level1-map 0 2)

(let ((x 1))
  (while (<= x level1-length)
    (insert (substring level1-map (- x 1) x))
    (setq x (1+ x))
    (if (eq (mod x 6) 0)
        (insert "newline")
    )
  )
)
XXXXXnewline
X...Xnewline
X...Xnewline
X...Xnewline
XXXXXnewline


#+end_src
I've got some stuff to parse the maps, but there's still a lot to do. I got to parse these maps, into 2D lists. But I need lists for resources, collisions, etc. Yeah... And I still need to figure out the graphics part.
* 10-24-23
- ... till tomorrow.
** 13:07
- OK, we're back, and we're going to do some stuff.
  - Step 1): Manually draw some xpm images on a grid, and do a grid re-draw.
** 13:45
- I've got a decent live-reload environment for testing in org-babel with:

  #+begin_src emacs-lisp :tangle yes
(load "~/dev/git/fifthXenia/etorio/etorio.el")
#+end_src
- Then I can just call the functions in a scratch buffer.
** 13:47
#+begin_src emacs-lisp :tangle yes
(progn (insert-image etorio-iron-xpm) (insert-image etorio-iron-xpm))
#+end_src
- Got mulitple images side by side, for grid, using ~progn~. I remember ~progn~, from needing it a while agon in an if statement to execute multiple things in an if block, because without progn lexical scoping, then one statement is true case, second is false, but progn allows you to bundle multiple statements for true case, or false case.

#+ATTR_ORG: :width 200
[[file:.images/2023-10-24_13-47-14_screenshot.png]]
** 14:14 Have maps working

- https://github.com/p3r7/awesome-elisp#maps
  - https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html
#+begin_src emacs-lisp :tangle yes
(setq my-plist (list
                'c "c-out"
                'i "i-out"
                'w "w-out"
                '@ "@-out"
                'b "b-out"))
(plist-get my-plist (intern "c"))
#+end_src

#+RESULTS:
#+begin_example
c-out
#+end_example

- Will now create map for xpm images, and then insert images, and create entire map grid.
** 15:19 It's fucking beautiful. Wow.


#+ATTR_ORG: :width 400
[[file:.images/2023-10-24_15-19-37_screenshot.png]]

#+begin_src emacs-lisp :tangle yes
;; map char in map (represented as a 'symbol) to it's corresponding xpm image
(setq map-char-to-xpm-plist (list
                'c etorio-copper-xpm
                'i etorio-iron-xpm
                'w etorio-wood-xpm
                '@ etorio-player-xpm
                'b etorio-belt-xpm
                '\  etorio-floor-xpm
                '\\  etorio-player-xpm
                '\# etorio-wall-xpm
                '\n etorio-player-xpm))


(setq level1-map
"###################
#                 #
#                 #
#      i      cc  #
#      i      cc  #
#         ww      #
#         ww    bb#
#               bb#
#          @    bb#
#                 #
###################")


(defun map-length (map)
  (length map)
  )

(defun display-map-as-images-test ()
  (interactive)
  (display-map-as-images level1-map)
)

(defun display-map-as-images (map)
  (let ((x 1) (map-length-val (map-length map)))
    (while (<= x map-length-val)
      (setq map-symbol-name (substring level1-map (- x 1) x))
      (setq map-symbol (intern map-symbol-name))
      ;;(insert map-symbol-name)
      (setq map-img (plist-get map-char-to-xpm-plist map-symbol))
      (if (not (eq (mod x 20) 0))
          ;; (insert "\n")
          (if map-img
              (insert-image map-img)
              )
          )
      (if (eq (mod x 20) 0)
          (insert "\n")
          )
      (setq x (1+ x))

      )
    )
  )
#+end_src



Here's what it looks like with blank floor, but I like the pattern, so I'll add some sort of pattern likely:


#+ATTR_ORG: :width 400
[[file:.images/2023-10-24_15-22-41_screenshot.png]]
** 15:25 Let's start working on a mode map, to move within the map
- bind left,right, up, down, keys
** 16:39 I thought more about the storage, we can do:
- 1: Resources 2d vector (coal, wood, copper, iron) - Only one resource element per location
  - *Store this as strings.*
- 2: Collision 2D vector (walls, water, farms, mining)
  - *Store this as strings.*
- 3: Stat Variables (resources, moves)



- Maybe we can do plist, where key is tuple of (x,y).
** Tomorrow Todo:
- 1) Get mode-map keybindings working
- 2) Get collisions working.
- 3) Get pushing things around working.
* 10-25-23
** Todo:
- 1) Get minor mode-map keybindings working
  - 1a) Get sound working
- 2) Get collisions working (restricting movement)
- 3) Get pushing things around working (and use collisions).
** 16:10 Starting to work on 1)
** 18:17 map parsing to map partially working, need to debug a bit further. Will look further into this tomorrow. 4 days left. I think I can probably get something assembled by then.

#+begin_src emacs-lisp :tangle yes
(setq map-plist (list 'a 1 ))


(defun parse-map-to-resources-and-collisions (map)
  (let ((x 0) (map-length-val (map-length map)))
    (while (< x map-length-val)
      ;; if not newline at end of string for map, which we want to skip
     ;; (if (not(eq (mod x 19) 0))
          (setq map-symbol-name (substring level1-map x (+ x 1)))
        (setq map-symbol (intern map-symbol-name))
        (setq y (/ x 19))
        ;; http://xahlee.info/emacs/emacs/elisp_symbol_plist.html
        ;; (put 'map-plist (intern (concat (number-to-string x) "," (number-to-string y) )) map-symbol-name)

        ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html
        (setq map-plist (plist-put map-plist
                                   (intern (concat (number-to-string (mod x 19)) "," (number-to-string y)))
                                   map-symbol-name))

       ;; )

      (setq x (1+ x))
      )
    )
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(parse-map-to-resources-and-collisions level1-map)
(print map-plist)
#+end_src

#+begin_src text

#+RESULTS:
| a     | 1 | 0,0   | # | 1,0   | # | 2,0   | # | 3,0   | # | 4,0   | # | 5,0   | # | 6,0   | # | 7,0   | # | 8,0  | # | 9,0  | # | 10,0 | # | 11,0 | # | 12,0 | # | 13,0 | # | 14,0 | # | 15,0 | # | 16,0 | # | 17,0 | # | 18,0 | # | 0,1 |
| 1,1   | # | 2,1   |   | 3,1   |   | 4,1   |   | 5,1   |   | 6,1   |   | 7,1   |   | 8,1   |   | 9,1   |   | 10,1 |   | 11,1 |   | 12,1 |   | 13,1 |   | 14,1 |   | 15,1 |   | 16,1 |   | 17,1 |   | 18,1 |   | 0,2  | # | 1,2  |   |     |
| 2,2   | # | 3,2   |   | 4,2   |   | 5,2   |   | 6,2   |   | 7,2   |   | 8,2   |   | 9,2   |   | 10,2  |   | 11,2 |   | 12,2 |   | 13,2 |   | 14,2 |   | 15,2 |   | 16,2 |   | 17,2 |   | 18,2 |   | 0,3  |   | 1,3  | # | 2,3  |   |     |
| 3,3   | # | 4,3   |   | 5,3   |   | 6,3   |   | 7,3   |   | 8,3   |   | 9,3   |   | 10,3  | i | 11,3  |   | 12,3 |   | 13,3 |   | 14,3 |   | 15,3 |   | 16,3 |   | 17,3 | c | 18,3 | c | 0,4  |   | 1,4  |   | 2,4  | # | 3,4  |   |     |
| 4,4   | # | 5,4   |   | 6,4   |   | 7,4   |   | 8,4   |   | 9,4   |   | 10,4  |   | 11,4  | i | 12,4  |   | 13,4 |   | 14,4 |   | 15,4 |   | 16,4 |   | 17,4 |   | 18,4 | c | 0,5  | c | 1,5  |   | 2,5  |   | 3,5  | # | 4,5  |   |     |
| 5,5   | # | 6,5   |   | 7,5   |   | 8,5   |   | 9,5   |   | 10,5  |   | 11,5  |   | 12,5  |   | 13,5  |   | 14,5 |   | 15,5 | w | 16,5 | w | 17,5 |   | 18,5 |   | 0,6  |   | 1,6  |   | 2,6  |   | 3,6  |   | 4,6  | # | 5,6  |   |     |
| 6,6   | # | 7,6   |   | 8,6   |   | 9,6   |   | 10,6  |   | 11,6  |   | 12,6  |   | 13,6  |   | 14,6  |   | 15,6 |   | 16,6 | w | 17,6 | w | 18,6 |   | 0,7  |   | 1,7  |   | 2,7  |   | 3,7  | b | 4,7  | b | 5,7  | # | 6,7  |   |     |
| 7,7   | # | 8,7   |   | 9,7   |   | 10,7  |   | 11,7  |   | 12,7  |   | 13,7  |   | 14,7  |   | 15,7  |   | 16,7 |   | 17,7 |   | 18,7 |   | 0,8  |   | 1,8  |   | 2,8  |   | 3,8  |   | 4,8  | b | 5,8  | b | 6,8  | # | 7,8  |   |     |
| 8,8   | # | 9,8   |   | 10,8  |   | 11,8  |   | 12,8  |   | 13,8  |   | 14,8  |   | 15,8  |   | 16,8  |   | 17,8 |   | 18,8 |   | 0,9  | @ | 1,9  |   | 2,9  |   | 3,9  |   | 4,9  |   | 5,9  | b | 6,9  | b | 7,9  | # | 8,9  |   |     |
| 9,9   | # | 10,9  |   | 11,9  |   | 12,9  |   | 13,9  |   | 14,9  |   | 15,9  |   | 16,9  |   | 17,9  |   | 18,9 |   | 0,10 |   | 1,10 |   | 2,10 |   | 3,10 |   | 4,10 |   | 5,10 |   | 6,10 |   | 7,10 |   | 8,10 | # | 9,10 |   |     |
| 10,10 | # | 11,10 | # | 12,10 | # | 13,10 | # | 14,10 | # | 15,10 | # | 16,10 | # | 17,10 | # | 18,10 | # | 0,11 | # | 1,11 | # | 2,11 | # | 3,11 | # | 4,11 | # | 5,11 | # | 6,11 | # | 7,11 | # | 8,11 | # | 9,11 | # |      |   |     |

#+end_src
* 10-26-23:
** todo
- 1) Get collisions working (restricting movement)
  - 1a) (Complete map parsing into collision map from yesterday)
  - 1b) Modify ~etorio-move-left/right/up/down~ functions, to check collision map to allow cursor to move or not.
    - If collision, stay in same cursor spot, else allow cursor to move in the inputted direction.
- 2) Get pushing things around working (and use collisions).
* 10-27-23:
** todo
- 1) get scoring system working
